{"version":3,"file":"static/js/444.107c67c8.chunk.js","mappings":"0HAMA,IAJc,WACZ,OAAO,eAAIA,UAAU,sBAAqB,SAAC,mBAC7C,C,2KCiHA,UA3GsB,WACpB,OAA0CC,EAAAA,EAAAA,UAAS,IAAG,eAA/CC,EAAa,KAAEC,EAAgB,KAChCC,GAAWC,EAAAA,EAAAA,MACTC,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAK,OAAKA,EAAMC,IAAI,IAA7CH,QAEFI,GAAUC,EAAAA,EAAAA,UACd,iBAAM,CACJ,CACEC,OAAQ,OACRC,GAAI,QACJC,KAAM,YAAM,SAAHC,IAAcC,MAAQ,CAAC,GAElC,CACEJ,OAAQ,UACRK,SAAU,WAEZ,CACEL,OAAQ,OACRK,SAAU,SAACF,GAAG,OAAQ,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKG,UAAUC,MAAM,KAAK,EAAE,GAEjD,CACEP,OAAQ,OACRK,SAAU,SAACF,GAAG,OAAQ,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKG,UAAUC,MAAM,KAAK,GAAGA,MAAM,KAAK,EAAE,GAEhE,GACD,IAGIC,GAAOT,EAAAA,EAAAA,UAAQ,kBAAMT,CAAa,GAAE,CAACA,IAE3C,GACEmB,EAAAA,EAAAA,UAAS,CAAEX,QAAAA,EAASU,KAAAA,IADdE,EAAa,EAAbA,cAAeC,EAAiB,EAAjBA,kBAAmBC,EAAY,EAAZA,aAAcC,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WAGxDC,EAAW,yCAAG,yFAEW,OAFX,SAEhBvB,GAASwB,EAAAA,EAAAA,KAAW,IAAO,UACRC,EAAAA,EAAAA,IAAU,8BAA8B,KAAD,EAApDC,EAAI,OACV1B,GAASwB,EAAAA,EAAAA,KAAW,IACpBzB,EAAiB2B,GAAM,yGAE1B,kBAPgB,mCAajB,OAJAC,EAAAA,EAAAA,YAAU,WACRJ,GACF,GAAG,KAGD,8BACGrB,GACC,SAAC,IAAO,KAER,qBAASN,UAAU,+CAA8C,WAC/D,eAAIA,UAAU,mEAAkE,SAAC,uBAIhFE,EAAc8B,OAAS,GACtB,gBAAKhC,UAAU,uBAAsB,UACnC,qCACMsB,KAAe,IACnBtB,UAAU,sCAAqC,WAE/C,kBAAOA,UAAU,aAAY,SAC1BwB,EAAaS,KAAI,SAACC,GAAW,OAC5B,iCAAQA,EAAYC,uBAAqB,aACtCD,EAAYE,QAAQH,KAAI,SAACI,GAAM,OAC9B,iCACMA,EAAOC,kBAAgB,IAC3BtC,UAAU,iFAAgF,SAEzFqC,EAAOE,OAAO,YACZ,MAEJ,OAGT,oCACMhB,KAAmB,IACvBvB,UAAU,oCAAmC,SAE5CyB,EAAKQ,KAAI,SAAClB,GAET,OADAW,EAAWX,IAET,iCAAQA,EAAIyB,eAAa,aACtBzB,EAAI0B,MAAMR,KAAI,SAACS,GAAI,OAClB,iCACMA,EAAKC,gBAAc,IACvB3C,UAAU,oDAAmD,SAE5D0C,EAAKH,OAAO,UACV,MAIb,cAKN,SAAC,IAAK,QAMlB,C","sources":["components/Empty.jsx","pages/Notifications.jsx"],"sourcesContent":["import React from \"react\";\n\nconst Empty = () => {\n  return <h2 className=\"nothing flex-center\">Nothing to show</h2>;\n};\n\nexport default Empty;\n","import React, { useEffect, useState, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Empty from \"../components/Empty\";\nimport Footer from \"../components/Footer\";\nimport Navbar from \"../components/Navbar\";\nimport fetchData from \"../helper/apiCall\";\nimport { setLoading } from \"../redux/reducers/rootSlice\";\nimport Loading from \"../components/Loading\";\nimport { useTable } from \"react-table\";\n\nconst Notifications = () => {\n  const [notifications, setNotifications] = useState([]);\n  const dispatch = useDispatch();\n  const { loading } = useSelector((state) => state.root);\n\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"S.No\",\n        id: \"index\",\n        Cell: ({ row }) => row.index + 1,\n      },\n      {\n        Header: \"Content\",\n        accessor: \"content\",\n      },\n      {\n        Header: \"Date\",\n        accessor: (row) => row?.updatedAt.split(\"T\")[0],\n      },\n      {\n        Header: \"Time\",\n        accessor: (row) => row?.updatedAt.split(\"T\")[1].split(\".\")[0],\n      },\n    ],\n    []\n  );\n\n  const data = useMemo(() => notifications, [notifications]);\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({ columns, data });\n\n  const getAllNotif = async () => {\n    try {\n      dispatch(setLoading(true));\n      const temp = await fetchData(`/notification/getallnotifs`);\n      dispatch(setLoading(false));\n      setNotifications(temp);\n    } catch (error) {}\n  };\n\n  useEffect(() => {\n    getAllNotif();\n  }, []);\n\n  return (\n    <>\n      {loading ? (\n        <Loading />\n      ) : (\n        <section className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12\">\n          <h2 className=\"text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl\">\n            Your Notifications\n          </h2>\n\n          {notifications.length > 0 ? (\n            <div className=\"mt-6 overflow-x-auto\">\n              <table\n                {...getTableProps()}\n                className=\"min-w-full divide-y divide-gray-200\"\n              >\n                <thead className=\"bg-gray-50\">\n                  {headerGroups.map((headerGroup) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                      {headerGroup.headers.map((column) => (\n                        <th\n                          {...column.getHeaderProps()}\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          {column.render(\"Header\")}\n                        </th>\n                      ))}\n                    </tr>\n                  ))}\n                </thead>\n                <tbody\n                  {...getTableBodyProps()}\n                  className=\"bg-white divide-y divide-gray-200\"\n                >\n                  {rows.map((row) => {\n                    prepareRow(row);\n                    return (\n                      <tr {...row.getRowProps()}>\n                        {row.cells.map((cell) => (\n                          <td\n                            {...cell.getCellProps()}\n                            className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"\n                          >\n                            {cell.render(\"Cell\")}\n                          </td>\n                        ))}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <Empty />\n          )}\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default Notifications;\n"],"names":["className","useState","notifications","setNotifications","dispatch","useDispatch","loading","useSelector","state","root","columns","useMemo","Header","id","Cell","row","index","accessor","updatedAt","split","data","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","getAllNotif","setLoading","fetchData","temp","useEffect","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps"],"sourceRoot":""}