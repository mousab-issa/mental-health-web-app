{"version":3,"file":"static/js/521.cb9e9070.chunk.js","mappings":"wMAIaA,GAASC,E,QAAAA,IAFV,mD,4BC6HZ,EA1Ha,SAAH,GAAoB,IAAdC,EAAM,EAANA,OACd,GAAgCC,EAAAA,EAAAA,UAAS,IAAG,eAArCC,EAAQ,KAAEC,EAAW,KAC5B,GAAwCF,EAAAA,EAAAA,UAAS,IAAG,eAA7CG,EAAY,KAAEC,EAAe,KAEpC,GAAeJ,EAAAA,EAAAA,UACbK,aAAaC,QAAQ,UACjBC,EAAAA,EAAAA,GAAUF,aAAaC,QAAQ,UAC/B,IAHCE,GAIN,YAJU,IAMXC,EAAAA,EAAAA,YAAU,WAUR,SAASC,IACPC,QAAQC,IAAI,YACd,CAEA,SAASC,IACPF,QAAQC,IAAI,eACd,CAWA,OA1BAE,EAAAA,EAAAA,IAAU,aAAD,OAAcf,IACpBgB,MAAK,SAACC,GACLL,QAAQC,IAAII,GACZd,EAAYc,EAASf,SACvB,IACCgB,OAAM,SAACC,GACNP,QAAQO,MAAMA,EAChB,IAUFrB,EAAOsB,GAAG,UAAWT,GACrBb,EAAOsB,GAAG,aAAcN,GAExBhB,EAAOuB,KAAK,WAAYrB,GAExBF,EAAOsB,GAAG,WAAW,SAACE,GACpBnB,GAAY,SAACD,GAAQ,wBAASA,GAAQ,CAAEoB,GAAU,GACpD,IAEO,WACLxB,EAAOyB,IAAI,UAAWZ,GACtBb,EAAOyB,IAAI,aAAcT,GACzBhB,EAAOyB,IAAI,UACb,CACF,GAAG,IAEH,IAAMC,EAAW,yCAAG,WAAOC,GAAK,4EAEL,GAFK,SAE5BA,EAAMC,iBACDtB,EAAa,CAAD,gDAQhB,OAJKuB,EAAO,CACXL,QAASlB,EACTwB,UAAWnB,EAAKoB,OAChBC,QAAS9B,GACT,EAAD,QAEK+B,EAAAA,EAAAA,IAAS,YAAaJ,GAAM,KAAD,EAEjC7B,EAAOuB,KAAK,cAAeM,GAAM,kDAEjCf,QAAQO,MAAM,EAAD,IAAQ,QAGvBd,EAAgB,IAAI,0DACrB,gBArBgB,sCAkCX2B,EAAa,SAACC,GAClB,IAAMC,EAAO,IAAIC,KAAKF,GACtB,MAAM,GAAN,OAAUC,EAAKE,qBACjB,EAEA,OACE,gBAAKC,UAAU,qBAAoB,UACjC,iBAAKA,UAAU,MAAK,WAClB,gBAAKA,UAAU,0CAAyC,SAC7C,OAARnC,QAAQ,IAARA,OAAQ,EAARA,EAAUoC,KAAI,SAAChB,EAASiB,GAAK,OAC5B,gBAAiBF,UAAU,qBAAoB,UAC7C,iBACEA,UAAS,kEACPf,EAAQM,YAAcnB,EAAKoB,OACvB,kCACA,0BACH,WAEH,0BAAOP,EAAQA,WACf,iBAAMe,UAAU,mCAAkC,SAC/CL,EAAWV,EAAQkB,iBAVhBD,EAaJ,OAIV,kBAAME,SAAUjB,EAAaa,UAAU,OAAM,WAC3C,kBACEK,MAAOtC,EACPuC,SAAU,SAAClB,GAAK,OAAKpB,EAAgBoB,EAAMmB,OAAOF,MAAM,EACxDG,YAAY,oBACZC,KAAK,OACLT,UAAU,uDAEZ,mBAAQA,UAAU,iDAAgD,SAAC,gBAO7E,E,UCpHA,MALA,WACE,IAAMU,GAASC,EAAAA,EAAAA,MAEf,OAAO,SAAC,EAAI,CAAChD,OAAQ+C,EAAO/C,QAC9B,C","sources":["utils/socket.js","components/Chat.jsx","pages/AppointmentChat.jsx"],"sourcesContent":["import { io } from \"socket.io-client\";\n\nconst URL = \"https://mental-health-backend-26w3.onrender.com\";\n\nexport const socket = io(URL);\n","import React, { useState, useEffect } from \"react\";\nimport { socket } from \"../utils/socket\";\nimport fetchData, { deleteData, postData } from \"../helper/apiCall\";\nimport jwtDecode from \"jwt-decode\";\n\nconst Chat = ({ chatId }) => {\n  const [messages, setMessages] = useState([]);\n  const [messageInput, setMessageInput] = useState(\"\");\n\n  const [user] = useState(\n    localStorage.getItem(\"token\")\n      ? jwtDecode(localStorage.getItem(\"token\"))\n      : \"\"\n  );\n\n  useEffect(() => {\n    fetchData(`/messages/${chatId}`)\n      .then((response) => {\n        console.log(response);\n        setMessages(response.messages);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n\n    function onConnect() {\n      console.log(\"Connected\");\n    }\n\n    function onDisconnect() {\n      console.log(\"Disconnected\");\n    }\n\n    socket.on(\"connect\", onConnect);\n    socket.on(\"disconnect\", onDisconnect);\n\n    socket.emit(\"joinChat\", chatId);\n\n    socket.on(\"message\", (message) => {\n      setMessages((messages) => [...messages, message]);\n    });\n\n    return () => {\n      socket.off(\"connect\", onConnect);\n      socket.off(\"disconnect\", onDisconnect);\n      socket.off(\"message\");\n    };\n  }, []);\n\n  const sendMessage = async (event) => {\n    try {\n      event.preventDefault();\n      if (!messageInput) {\n        return;\n      }\n\n      const data = {\n        message: messageInput,\n        sender_id: user.userId,\n        chat_id: chatId,\n      };\n\n      await postData(\"/messages\", data);\n\n      socket.emit(\"sendMessage\", data);\n    } catch (error) {\n      console.error(error);\n    }\n\n    setMessageInput(\"\");\n  };\n\n  const deleteMessage = async (messageId) => {\n    try {\n      await deleteData(`/message/${messageId}`);\n      setMessages((messages) =>\n        messages.filter((message) => message._id !== messageId)\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const formatDate = (timestamp) => {\n    const date = new Date(timestamp);\n    return `${date.toLocaleTimeString()}`;\n  };\n\n  return (\n    <div className=\"h-fill bg-gray-100\">\n      <div className=\"p-6\">\n        <div className=\"overflow-y-auto h-[75vh] mb-6 space-y-4\">\n          {messages?.map((message, index) => (\n            <div key={index} className=\"flex flex-col my-2\">\n              <div\n                className={`flex flex-col justify-between rounded-xl px-4 py-2 mb-1 ${\n                  message.sender_id === user.userId\n                    ? \"bg-blue-500 text-white self-end\"\n                    : \"bg-gray-300 self-start\"\n                }`}\n              >\n                <span>{message.message}</span>\n                <span className=\"text-xs text-gray-500 self-start\">\n                  {formatDate(message.createdAt)}\n                </span>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        <form onSubmit={sendMessage} className=\"flex\">\n          <input\n            value={messageInput}\n            onChange={(event) => setMessageInput(event.target.value)}\n            placeholder=\"Type a message...\"\n            type=\"text\"\n            className=\"flex-grow rounded-l-xl p-2 border border-gray-300\"\n          />\n          <button className=\"bg-green-500 text-white rounded-r-xl px-4 py-2\">\n            Send\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport Chat from \"../components/Chat\";\nimport { useParams } from \"react-router-dom\";\n\nfunction AppointmentChat() {\n  const params = useParams();\n\n  return <Chat chatId={params.chatId} />;\n}\nexport default AppointmentChat;\n"],"names":["socket","io","chatId","useState","messages","setMessages","messageInput","setMessageInput","localStorage","getItem","jwtDecode","user","useEffect","onConnect","console","log","onDisconnect","fetchData","then","response","catch","error","on","emit","message","off","sendMessage","event","preventDefault","data","sender_id","userId","chat_id","postData","formatDate","timestamp","date","Date","toLocaleTimeString","className","map","index","createdAt","onSubmit","value","onChange","target","placeholder","type","params","useParams"],"sourceRoot":""}