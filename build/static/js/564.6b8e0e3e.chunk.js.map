{"version":3,"file":"static/js/564.6b8e0e3e.chunk.js","mappings":"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","sources":["components/Empty.jsx","pages/Appointments.jsx"],"sourcesContent":["import React from \"react\";\n\nconst Empty = () => {\n  return <h2 className=\"nothing flex-center\">Nothing to show</h2>;\n};\n\nexport default Empty;\n","import React, { Fragment, useEffect, useMemo } from \"react\";\nimport jwt_decode from \"jwt-decode\";\nimport { useTable } from \"react-table\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  fetchAppointments,\n  completeAppointment,\n  acceptAppointment,\n} from \"../redux/reducers/appointment.slice\";\nimport Loading from \"../components/Loading\";\nimport Empty from \"../components/Empty\";\n\nconst Appointments = () => {\n  const dispatch = useDispatch();\n  let navigate = useNavigate();\n\n  const appointments = useSelector((state) => {\n    return state.appointment.appointments;\n  });\n\n  const status = useSelector((state) => {\n    return state.appointment.status;\n  });\n\n  const { userId } = jwt_decode(localStorage.getItem(\"token\"));\n\n  const navigateToChat = (appointment) => {\n    navigate(`/appointment/chat/${appointment._id}`);\n  };\n\n  const complete = (ele) => {\n    dispatch(completeAppointment(ele));\n  };\n\n  const accept = (ele) => {\n    dispatch(acceptAppointment(ele));\n  };\n\n  useEffect(() => {\n    dispatch(fetchAppointments());\n  }, [dispatch]);\n\n  const data = useMemo(() => appointments, [appointments]);\n  const columns = useMemo(\n    () => [\n      {\n        Header: \"S.No\",\n        accessor: (row, i) => i + 1,\n      },\n      {\n        Header: \"Doctor\",\n        accessor: (row) =>\n          `${row?.doctorId?.firstname} ${row?.doctorId?.lastname}`,\n      },\n      {\n        Header: \"Patient\",\n        accessor: (row) => `${row?.userId?.firstname} ${row?.userId?.lastname}`,\n      },\n      {\n        Header: \"Appointment Date\",\n        accessor: \"date\",\n      },\n      {\n        Header: \"Appointment Time\",\n        accessor: \"time\",\n      },\n      {\n        Header: \"Booking Date\",\n        accessor: (row) => row?.createdAt.split(\"T\")[0],\n      },\n      {\n        Header: \"Booking Time\",\n        accessor: (row) => row?.updatedAt.split(\"T\")[1].split(\".\")[0],\n      },\n      {\n        Header: \"Status\",\n        accessor: \"status\",\n      },\n      {\n        Header: \"Action\",\n        id: \"action\",\n        Cell: ({ row }) => {\n          const isDisabled =\n            row.original?.status === \"Completed\" ||\n            row.original?.status === \"Accepted\";\n          if (userId === row.original?.doctorId?._id) {\n            return (\n              <Fragment>\n                <button\n                  className={`btn bg-green-500 text-white px-4 py-2 m-2 rounded ${\n                    row.original?.status === \"Completed\"\n                      ? \"opacity-50 cursor-not-allowed\"\n                      : \"\"\n                  }`}\n                  disabled={row.original?.status === \"Completed\"}\n                  onClick={() => complete(row.original)}\n                >\n                  Complete\n                </button>\n\n                <button\n                  className={`btn bg-green-500 text-white px-4 py-2 m-2 rounded ${\n                    isDisabled ? \"opacity-50 cursor-not-allowed\" : \"\"\n                  }`}\n                  disabled={isDisabled}\n                  onClick={() => accept(row.original)}\n                >\n                  Accept {row.original?.status}\n                </button>\n              </Fragment>\n            );\n          } else {\n            return null;\n          }\n        },\n      },\n      {\n        Header: \"Chat\",\n        id: \"chat\",\n        Cell: ({ row }) => {\n          if ([\"Accepted\", \"Completed\"].includes(row.original?.status)) {\n            return (\n              <button\n                className=\"btn bg-blue-500 text-white px-4 py-2 m-2 rounded\"\n                onClick={() => navigateToChat(row.original)}\n              >\n                Go to Chat\n              </button>\n            );\n          } else {\n            return null;\n          }\n        },\n      },\n    ],\n    [userId]\n  );\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\n    useTable({ columns, data });\n\n  return (\n    <>\n      {status === \"loading\" ? (\n        <Loading />\n      ) : (\n        <section className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-12\">\n          <h2 className=\"text-2xl font-extrabold tracking-tight text-gray-900 sm:text-3xl\">\n            Your Appointments\n          </h2>\n          {appointments.length > 0 ? (\n            <div className=\"mt-6 overflow-auto\">\n              <table\n                {...getTableProps()}\n                className=\"min-w-full divide-y divide-gray-200\"\n              >\n                <thead>\n                  {headerGroups.map((headerGroup) => (\n                    <tr\n                      {...headerGroup.getHeaderGroupProps()}\n                      className=\"bg-gray-50\"\n                    >\n                      {headerGroup.headers.map((column) => (\n                        <th\n                          {...column.getHeaderProps()}\n                          className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                        >\n                          {column.render(\"Header\")}\n                        </th>\n                      ))}\n                    </tr>\n                  ))}\n                </thead>\n                <tbody\n                  {...getTableBodyProps()}\n                  className=\"bg-white divide-y divide-gray-200\"\n                >\n                  {rows.map((row) => {\n                    prepareRow(row);\n                    return (\n                      <tr\n                        {...row.getRowProps()}\n                        className=\"hover:bg-gray-100 transition ease-in-out duration-200\"\n                      >\n                        {row.cells.map((cell) => (\n                          <td\n                            {...cell.getCellProps()}\n                            className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"\n                          >\n                            {cell.render(\"Cell\")}\n                          </td>\n                        ))}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <Empty />\n          )}\n        </section>\n      )}\n    </>\n  );\n};\n\nexport default Appointments;\n"],"names":["className","dispatch","useDispatch","navigate","useNavigate","appointments","useSelector","state","appointment","status","userId","jwt_decode","localStorage","getItem","useEffect","fetchAppointments","data","useMemo","columns","Header","accessor","row","i","doctorId","firstname","lastname","createdAt","split","updatedAt","id","Cell","isDisabled","original","_id","Fragment","disabled","onClick","ele","completeAppointment","acceptAppointment","includes","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps"],"sourceRoot":""}